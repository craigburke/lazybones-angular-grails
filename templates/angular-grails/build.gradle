buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:\\\$grailsVersion"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.1.1'
        classpath 'com.craigburke.angular:angular-template-asset-pipeline:2.1.0'
        classpath 'com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0'
		classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
    }
}

plugins {
	id 'io.spring.dependency-management' version '0.4.0.RELEASE'
}

version '${version}'
group '${group}'

apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'asset-pipeline'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'com.moowork.node'

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
	jasmineDependencies = ['karma', 'karma-jasmine@2_0', 'karma-phantomjs-launcher']
	karmaExec = file('node_modules/karma/bin/karma')
	karmaConfig = 'src/test/js/karma.conf.js'
}

assets {
    minifyJs = true
    minifyCss = true
}

node {
	version = '0.11.13'
	distBaseUrl = 'http://nodejs.org/dist'
	download = true
	workDir = file("\\\${project.buildDir}/nodejs")
}

task setupPhantomJS(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install', 'phantomjs', '--loglevel', 'error']
}

task setupJasmine(type: NpmTask) {
	outputs.dir file('node_modules')
	args = ['install'] + jasmineDependencies + ['--loglevel', 'error']
}

task jasmineRun(type: NodeTask, dependsOn: ['setupPhantomJS', 'setupJasmine']) {
	script = karmaExec
	args = ['start', karmaConfig, '--single-run']
}

task jasmineWatch(type: NodeTask, dependsOn: 'setupJasmine') {
        script = karmaExec
        args = ['start', karmaConfig]
}

test.dependsOn jasmineRun

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:\\\$grailsVersion"
    }
    applyMavenExclusions false
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.grails:grails-dependencies'
    compile 'org.grails:grails-web-boot'

    compile 'org.grails.plugins:hibernate'
    compile 'org.grails.plugins:cache'
    compile 'org.hibernate:hibernate-ehcache'

    runtime 'org.grails.plugins:asset-pipeline'
    runtime 'com.craigburke.angular:angular-template-asset-pipeline:2.1.0'
    runtime 'com.craigburke.angular:angular-annotate-asset-pipeline:2.1.0'
    runtime 'org.grails.plugins:scaffolding'

    testCompile 'org.grails:grails-plugin-testing'
    testCompile 'org.grails.plugins:geb'
	
	testCompile 'org.seleniumhq.selenium:selenium-support:2.43.1'
    testCompile('com.github.detro.ghostdriver:phantomjsdriver:1.1.0') {
		transitive = false
	}

    console 'org.grails:grails-console'
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}
